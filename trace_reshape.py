# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TraceReshape
                                 A QGIS plugin
 A plugin for reshaping polygons by holding down the mouse button
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-08
        git sha              : $Format:%H$
        copyright            : (C) 2025 by ogzhncelik
        email                : ogzhn.celik@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction
from qgis._core import Qgis, QgsCoordinateTransform

from qgis.core import (
    QgsProject,
    QgsGeometry,
    QgsWkbTypes
)

from qgis.gui import QgsMapTool, QgsRubberBand
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .trace_reshape_dialog import TraceReshapeDialog
from qgis.core import QgsFeatureRequest, QgsGeometry, QgsWkbTypes, QgsLineString, QgsRectangle, QgsPointXY
import os.path
import traceback
#import resources
from PyQt5.QtCore import Qt


class TraceReshape:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TraceReshape_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Trace Reshape')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TraceReshape', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/trace_reshape/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Trace Reshape'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Trace Reshape'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        self.tool = TraceReshapeTool(self.iface)
        self.iface.mapCanvas().setMapTool(self.tool)
        self.iface.messageBar().pushMessage("Trace Reshape is started",level=Qgis.Info,duration=1)


class TraceReshapeTool(QgsMapTool):
    def __init__(self, iface):
        super().__init__(iface.mapCanvas())
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.is_drawing = False
        self.points = []
        self.undo_stack = []
        self.redo_stack = []
        self.rubber_band = QgsRubberBand(self.canvas, QgsWkbTypes.LineGeometry)
        self.rubber_band.setColor(QColor(255, 0, 0))
        self.rubber_band.setWidth(2)

    def deactivate(self):
        self.is_drawing = False
        self.points = []
        if self.rubber_band:
            self.rubber_band.reset(QgsWkbTypes.LineGeometry)
        super().deactivate()

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.is_drawing = False
            self.points = []
            if self.rubber_band:
                self.rubber_band.reset(QgsWkbTypes.LineGeometry)

            self.deactivate()
            self.iface.mapCanvas().unsetMapTool(self)

        elif event.modifiers() == Qt.ControlModifier and event.key() == Qt.Key_Z:
            if self.undo_stack:
                self.redo_stack.append(list(self.points))  # mevcut hali redo'ya kaydet
                self.points = self.undo_stack.pop()
                self.redraw_rubber_band()

        elif event.modifiers() == Qt.ControlModifier and event.key() == Qt.Key_Y:
            if self.redo_stack:
                self.undo_stack.append(list(self.points))
                self.points = self.redo_stack.pop()
                self.redraw_rubber_band()

    def redraw_rubber_band(self):
        if not self.rubber_band:
            return
        self.rubber_band.reset(QgsWkbTypes.LineGeometry)
        for p in self.points:
            self.rubber_band.addPoint(p)
        self.rubber_band.show()

    def canvasPressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.is_drawing = True
            self.points = []
            self.rubber_band.reset(QgsWkbTypes.LineGeometry)
            point = self.toMapCoordinates(event.pos())
            self.points.append(point)
            self.rubber_band.addPoint(point)

        elif event.button() == Qt.RightButton and self.is_drawing:
            self.is_drawing = False
            point = self.toMapCoordinates(event.pos())
            self.points.append(point)
            self.rubber_band.addPoint(point)
            self.apply_reshape()

    def canvasMoveEvent(self, event):
        if self.is_drawing:
            point = self.toMapCoordinates(event.pos())
            if not self.points or point.distance(self.points[-1]) > self.canvas.mapUnitsPerPixel() * 2:
                self.undo_stack.append(list(self.points))
                self.redo_stack.clear()
                self.points.append(point)
                self.rubber_band.addPoint(point, True)
                self.rubber_band.show()

    def apply_reshape(self):


        if not self.points or len(self.points) < 2:
            self.rubber_band.reset(QgsWkbTypes.LineGeometry)
            self.iface.messageBar().pushMessage("Make a valid drawing",level=Qgis.Warning, duration=2)
            return

        layer = self.canvas.currentLayer()
        if not layer or layer.geometryType() not in [QgsWkbTypes.PolygonGeometry, QgsWkbTypes.LineGeometry]:
            self.rubber_band.reset(QgsWkbTypes.LineGeometry)
            self.iface.messageBar().pushMessage( "Please select a polygon or line layer", level=Qgis.Warning, duration=2)
            return

        if not layer.isEditable():
            self.iface.messageBar().pushMessage("Layer is not in edit mode", level=Qgis.Warning, duration=2)
            return

        last_point = self.points[-1]
        search_radius = self.canvas.mapUnitsPerPixel() * 500
        rect = QgsRectangle(last_point.x() - search_radius, last_point.y() - search_radius,
                            last_point.x() + search_radius, last_point.y() + search_radius)

        canvas_crs = self.canvas.mapSettings().destinationCrs()
        layer_crs = layer.crs()


        if canvas_crs != layer_crs:
            transform = QgsCoordinateTransform(canvas_crs, layer_crs, QgsProject.instance())
            rect = transform.transformBoundingBox(rect)

        feature = None
        polyline = QgsGeometry.fromPolylineXY(self.points)

        if canvas_crs != layer_crs:
            transform = QgsCoordinateTransform(canvas_crs, layer_crs, QgsProject.instance())
            transformed_polyline = polyline
            transformed_polyline.transform(transform)
        else:
            transformed_polyline = polyline


        features = list(layer.getFeatures(QgsFeatureRequest(rect)))


        no_match = True
        for f in features:
            g = f.geometry()
            if not g:
                self.iface.messageBar().pushMessage("Feature geometry is None!", level=Qgis.Warning, duration=2)
                continue

            buffered_geom = g.buffer(0.001, 5)
            if buffered_geom.intersects(transformed_polyline) or transformed_polyline.within(buffered_geom):
                feature = f
                no_match = False
                break
        if no_match:
            self.rubber_band.reset(QgsWkbTypes.LineGeometry)
            self.iface.messageBar().pushMessage("The line you drew does not intersect any geometry", level=Qgis.Warning,duration=2)
            return


        if not feature:
            self.rubber_band.reset(QgsWkbTypes.LineGeometry)
            self.iface.messageBar().pushMessage("No polygons were found that intersect your drawing",level=Qgis.Warning, duration=2)
            return

        original_geom = feature.geometry()
        line_points = [QgsPointXY(p) for p in self.points]
        if original_geom.isMultipart():
            if original_geom.type() == QgsWkbTypes.PolygonGeometry:
                part = original_geom.asMultiPolygon()[0]
                original_geom = QgsGeometry.fromPolygonXY(part)
            elif original_geom.type() == QgsWkbTypes.LineGeometry:
                part = original_geom.asMultiPolyline()[0]
                original_geom = QgsGeometry.fromPolylineXY(part)
        try:
            #new_line = QgsLineString(line_points)
            #line_geom = QgsGeometry.fromPolylineXY(line_points)

            canvas_crs = self.canvas.mapSettings().destinationCrs()
            layer_crs = layer.crs()

            points = self.points

            # CRS dönüşümü gerekiyorsa noktaları çevir
            if canvas_crs != layer_crs:
                transform = QgsCoordinateTransform(canvas_crs, layer_crs, QgsProject.instance())
                transformed_points = [transform.transform(p) for p in points]
            else:
                transformed_points = points

            line_geom = QgsGeometry.fromPolylineXY(transformed_points)

            #line_string = QgsLineString(transformed_points)

            # Tırtıkları azaltmak için çizgiyi sadeleştir
            #tolerance = self.canvas.mapUnitsPerPixel() * 1.5
            #line_geom = line_geom.simplify(tolerance)
            line_geom = line_geom.smooth(2, 0.1, False)

            result = original_geom.reshapeGeometry(line_geom.constGet())

            if result == Qgis.GeometryOperationResult.Success:

                reshaped_geom = original_geom  # çünkü reshapeGeometry orijinal geometriyi değiştiriyor
            else:
                errors = {
                    Qgis.GeometryOperationResult.InvalidBaseGeometry: "Invalid geometry (must be Polygon)",
                    Qgis.GeometryOperationResult.InvalidInputGeometry: "Invalid reshape line",
                    Qgis.GeometryOperationResult.GeometryEngineError: "Geometry engine error",
                    Qgis.GeometryOperationResult.SplitFailed: "The geometry could not be divided into two parts",
                    Qgis.GeometryOperationResult.CurveHandlingError: "Curve processing error"
                }
                self.iface.messageBar().pushMessage("Error", errors.get(result, f"Unknown Error: {result}"),
                                                    level=Qgis.Warning, duration=2)
                self.rubber_band.reset(QgsWkbTypes.LineGeometry)
                return

        except Exception as e:

            tb = traceback.format_exc()
            self.iface.messageBar().pushMessage(f"Error:\n{tb}", level=Qgis.Warning, duration=2)
            return

        if not reshaped_geom or not reshaped_geom.isGeosValid():
            self.rubber_band.reset(QgsWkbTypes.LineGeometry)
            self.iface.messageBar().pushMessage("Reshaping created invalid geometry",level=Qgis.Warning, duration=2)
            return

        layer.beginEditCommand("Trace reshape")
        if not layer.changeGeometry(feature.id(), reshaped_geom):
            layer.destroyEditCommand()
            self.rubber_band.reset(QgsWkbTypes.LineGeometry)
            self.iface.messageBar().pushMessage("Failed to update geometry",level=Qgis.Warning, duration=2)
            return
        layer.endEditCommand()

        self.rubber_band.reset(QgsWkbTypes.LineGeometry)
        self.points = []









